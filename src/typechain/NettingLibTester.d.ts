/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NettingLibTesterInterface extends ethers.utils.Interface {
  functions: {
    "addMargin(uint256,(int256,int256,int256,int256,int256))": FunctionFragment;
    "calculateWeightedDelta(uint256,int128,int128)": FunctionFragment;
    "complete((uint256,uint256,uint256,bool))": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getRequiredMargin(uint256,(int256,int256,int256,int256,int256))": FunctionFragment;
    "getRequiredTokenAmountsForHedge(uint256,int256[2],int256)": FunctionFragment;
    "info()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMargin",
    values: [
      BigNumberish,
      {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWeightedDelta",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "complete",
    values: [
      {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRequiredMargin",
    values: [
      BigNumberish,
      {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredTokenAmountsForHedge",
    values: [BigNumberish, [BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateWeightedDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredTokenAmountsForHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;

  events: {};
}

export class NettingLibTester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NettingLibTesterInterface;

  functions: {
    addMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateWeightedDelta(
      _productId: BigNumberish,
      _delta0: BigNumberish,
      _delta1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    complete(
      _params: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [[BigNumber, BigNumber], BigNumber] & {
          amountsUsdc: [BigNumber, BigNumber];
          amountUnderlying: BigNumber;
        }
      ]
    >;

    getRequiredMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequiredTokenAmountsForHedge(
      _amountUnderlying: BigNumberish,
      _deltas: [BigNumberish, BigNumberish],
      _spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          amountUsdc: BigNumber;
          amountUnderlying: BigNumber;
          futureWeight: BigNumber;
          isLong: boolean;
        }
      ]
    >;

    info(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountUnderlying: BigNumber }>;
  };

  addMargin(
    _productId: BigNumberish,
    _params: {
      delta0: BigNumberish;
      delta1: BigNumberish;
      gamma1: BigNumberish;
      spotPrice: BigNumberish;
      poolMarginRiskParam: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateWeightedDelta(
    _productId: BigNumberish,
    _delta0: BigNumberish,
    _delta1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  complete(
    _params: {
      amountUsdc: BigNumberish;
      amountUnderlying: BigNumberish;
      futureWeight: BigNumberish;
      isLong: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInfo(
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber, BigNumber], BigNumber] & {
      amountsUsdc: [BigNumber, BigNumber];
      amountUnderlying: BigNumber;
    }
  >;

  getRequiredMargin(
    _productId: BigNumberish,
    _params: {
      delta0: BigNumberish;
      delta1: BigNumberish;
      gamma1: BigNumberish;
      spotPrice: BigNumberish;
      poolMarginRiskParam: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequiredTokenAmountsForHedge(
    _amountUnderlying: BigNumberish,
    _deltas: [BigNumberish, BigNumberish],
    _spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amountUsdc: BigNumber;
      amountUnderlying: BigNumber;
      futureWeight: BigNumber;
      isLong: boolean;
    }
  >;

  info(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calculateWeightedDelta(
      _productId: BigNumberish,
      _delta0: BigNumberish,
      _delta1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    complete(
      _params: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getInfo(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber], BigNumber] & {
        amountsUsdc: [BigNumber, BigNumber];
        amountUnderlying: BigNumber;
      }
    >;

    getRequiredMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredTokenAmountsForHedge(
      _amountUnderlying: BigNumberish,
      _deltas: [BigNumberish, BigNumberish],
      _spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amountUsdc: BigNumber;
        amountUnderlying: BigNumber;
        futureWeight: BigNumber;
        isLong: boolean;
      }
    >;

    info(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateWeightedDelta(
      _productId: BigNumberish,
      _delta0: BigNumberish,
      _delta1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    complete(
      _params: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredTokenAmountsForHedge(
      _amountUnderlying: BigNumberish,
      _deltas: [BigNumberish, BigNumberish],
      _spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateWeightedDelta(
      _productId: BigNumberish,
      _delta0: BigNumberish,
      _delta1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    complete(
      _params: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredMargin(
      _productId: BigNumberish,
      _params: {
        delta0: BigNumberish;
        delta1: BigNumberish;
        gamma1: BigNumberish;
        spotPrice: BigNumberish;
        poolMarginRiskParam: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredTokenAmountsForHedge(
      _amountUnderlying: BigNumberish,
      _deltas: [BigNumberish, BigNumberish],
      _spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

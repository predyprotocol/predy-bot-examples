/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PerpetualMarketCoreInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "amountLiquidity()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "completeHedgingProcedure((uint256,uint256,uint256,bool))": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "executeFundingPayment()": FunctionFragment;
    "getLPTokenPrice(int256)": FunctionFragment;
    "getNettingInfo()": FunctionFragment;
    "getTokenAmountForHedging()": FunctionFragment;
    "getTradePrice(uint256,int256[2])": FunctionFragment;
    "getTradePriceInfo(int256[2])": FunctionFragment;
    "getUtilizationRatio()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,uint256,int256)": FunctionFragment;
    "lastHedgeSpotPrice()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolSnapshot()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "rebalance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setHedgeParams(uint256,uint256,uint256)": FunctionFragment;
    "setPerpFutureMaxFundingRate(int256)": FunctionFragment;
    "setPerpetualMarket(address)": FunctionFragment;
    "setPoolMarginRiskParam(int256)": FunctionFragment;
    "setSpreadParams(uint256,uint256)": FunctionFragment;
    "setSquaredPerpFundingMultiplier(int256)": FunctionFragment;
    "setTradeFeeRate(int256,int256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePoolPositions(int256[2])": FunctionFragment;
    "updatePoolSnapshot()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "amountLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "completeHedgingProcedure",
    values: [
      {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFundingPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNettingInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountForHedging",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePrice",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePriceInfo",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUtilizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastHedgeSpotPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgeParams",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpFutureMaxFundingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolMarginRiskParam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSquaredPerpFundingMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeFeeRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolPositions",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeHedgingProcedure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNettingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountForHedging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUtilizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHedgeSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpFutureMaxFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolMarginRiskParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSquaredPerpFundingMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "FundingPayment(uint256,int256,int256,int256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetHedgeParams(uint256,uint256,uint256)": EventFragment;
    "SetPerpFutureMaxFundingRate(int256)": EventFragment;
    "SetPoolMarginRiskParam(int256)": EventFragment;
    "SetSpreadParams(uint256,uint256)": EventFragment;
    "SetSquaredPerpFundingMultiplier(int256)": EventFragment;
    "SetTradeFeeRate(int256,int256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VarianceUpdated(int256,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgeParams"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPerpFutureMaxFundingRate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolMarginRiskParam"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSpreadParams"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetSquaredPerpFundingMultiplier"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTradeFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VarianceUpdated"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type FundingPaymentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    productId: BigNumber;
    fundingRate: BigNumber;
    amountFundingPaidPerPosition: BigNumber;
    fundingPaidPerPosition: BigNumber;
    poolReceived: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetHedgeParamsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    minSlippageToleranceOfHedge: BigNumber;
    maxSlippageToleranceOfHedge: BigNumber;
    hedgeRateOfReturnThreshold: BigNumber;
  }
>;

export type SetPerpFutureMaxFundingRateEvent = TypedEvent<
  [BigNumber] & { perpFutureMaxFundingRate: BigNumber }
>;

export type SetPoolMarginRiskParamEvent = TypedEvent<
  [BigNumber] & { poolMarginRiskParam: BigNumber }
>;

export type SetSpreadParamsEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    safetyPeriod: BigNumber;
    numBlocksPerSpreadDecreasing: BigNumber;
  }
>;

export type SetSquaredPerpFundingMultiplierEvent = TypedEvent<
  [BigNumber] & { squaredPerpFundingMultiplier: BigNumber }
>;

export type SetTradeFeeRateEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    tradeFeeRate: BigNumber;
    protocolFeeRate: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type VarianceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    variance: BigNumber;
    underlyingPrice: BigNumber;
    timestamp: BigNumber;
  }
>;

export class PerpetualMarketCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PerpetualMarketCoreInterface;

  functions: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    amountLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeFundingPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNettingInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        [[BigNumber, BigNumber], BigNumber] & {
          amountsUsdc: [BigNumber, BigNumber];
          amountUnderlying: BigNumber;
        }
      ]
    >;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          amountUsdc: BigNumber;
          amountUnderlying: BigNumber;
          futureWeight: BigNumber;
          isLong: boolean;
        }
      ] & {
        completeParams: [BigNumber, BigNumber, BigNumber, boolean] & {
          amountUsdc: BigNumber;
          amountUnderlying: BigNumber;
          futureWeight: BigNumber;
          isLong: boolean;
        };
      }
    >;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          spotPrice: BigNumber;
          tradePrices: [BigNumber, BigNumber];
          fundingRates: [BigNumber, BigNumber];
          amountsFundingPaidPerPosition: [BigNumber, BigNumber];
        }
      ]
    >;

    getUtilizationRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastHedgeSpotPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolSnapshot(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        futureBaseFundingRate: BigNumber;
        ethVariance: BigNumber;
        ethPrice: BigNumber;
        lastSnapshotTime: BigNumber;
      }
    >;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountLockedLiquidity: BigNumber;
        positionPerpetuals: BigNumber;
        entryPrice: BigNumber;
        amountFundingPaidPerPosition: BigNumber;
        lastFundingPaymentTime: BigNumber;
      }
    >;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgeParams(
      _minSlippageToleranceOfHedge: BigNumberish,
      _maxSlippageToleranceOfHedge: BigNumberish,
      _hedgeRateOfReturnThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerpFutureMaxFundingRate(
      _perpFutureMaxFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerpetualMarket(
      _perpetualMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolMarginRiskParam(
      _poolMarginRiskParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpreadParams(
      _safetyPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSquaredPerpFundingMultiplier(
      _squaredPerpFundingMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradeFeeRate(
      _tradeFeeRate: BigNumberish,
      _protocolFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolSnapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  amountLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  completeHedgingProcedure(
    _completeParams: {
      amountUsdc: BigNumberish;
      amountUnderlying: BigNumberish;
      futureWeight: BigNumberish;
      isLong: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _depositor: string,
    _depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeFundingPayment(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLPTokenPrice(
    _deltaLiquidityAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNettingInfo(
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber, BigNumber], BigNumber] & {
      amountsUsdc: [BigNumber, BigNumber];
      amountUnderlying: BigNumber;
    }
  >;

  getTokenAmountForHedging(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amountUsdc: BigNumber;
      amountUnderlying: BigNumber;
      futureWeight: BigNumber;
      isLong: boolean;
    }
  >;

  getTradePrice(
    _productId: BigNumberish,
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTradePriceInfo(
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber, BigNumber],
      [BigNumber, BigNumber],
      [BigNumber, BigNumber]
    ] & {
      spotPrice: BigNumber;
      tradePrices: [BigNumber, BigNumber];
      fundingRates: [BigNumber, BigNumber];
      amountsFundingPaidPerPosition: [BigNumber, BigNumber];
    }
  >;

  getUtilizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _depositor: string,
    _depositAmount: BigNumberish,
    _initialFundingRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastHedgeSpotPrice(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolSnapshot(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      futureBaseFundingRate: BigNumber;
      ethVariance: BigNumber;
      ethPrice: BigNumber;
      lastSnapshotTime: BigNumber;
    }
  >;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amountLockedLiquidity: BigNumber;
      positionPerpetuals: BigNumber;
      entryPrice: BigNumber;
      amountFundingPaidPerPosition: BigNumber;
      lastFundingPaymentTime: BigNumber;
    }
  >;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgeParams(
    _minSlippageToleranceOfHedge: BigNumberish,
    _maxSlippageToleranceOfHedge: BigNumberish,
    _hedgeRateOfReturnThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerpFutureMaxFundingRate(
    _perpFutureMaxFundingRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerpetualMarket(
    _perpetualMarket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolMarginRiskParam(
    _poolMarginRiskParam: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpreadParams(
    _safetyPeriod: BigNumberish,
    _numBlocksPerSpreadDecreasing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSquaredPerpFundingMultiplier(
    _squaredPerpFundingMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradeFeeRate(
    _tradeFeeRate: BigNumberish,
    _protocolFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolPositions(
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolSnapshot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _withdrawer: string,
    _withdrawnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeFundingPayment(overrides?: CallOverrides): Promise<void>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNettingInfo(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber], BigNumber] & {
        amountsUsdc: [BigNumber, BigNumber];
        amountUnderlying: BigNumber;
      }
    >;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amountUsdc: BigNumber;
        amountUnderlying: BigNumber;
        futureWeight: BigNumber;
        isLong: boolean;
      }
    >;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber]
      ] & {
        spotPrice: BigNumber;
        tradePrices: [BigNumber, BigNumber];
        fundingRates: [BigNumber, BigNumber];
        amountsFundingPaidPerPosition: [BigNumber, BigNumber];
      }
    >;

    getUtilizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastHedgeSpotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolSnapshot(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        futureBaseFundingRate: BigNumber;
        ethVariance: BigNumber;
        ethPrice: BigNumber;
        lastSnapshotTime: BigNumber;
      }
    >;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountLockedLiquidity: BigNumber;
        positionPerpetuals: BigNumber;
        entryPrice: BigNumber;
        amountFundingPaidPerPosition: BigNumber;
        lastFundingPaymentTime: BigNumber;
      }
    >;

    rebalance(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setHedgeParams(
      _minSlippageToleranceOfHedge: BigNumberish,
      _maxSlippageToleranceOfHedge: BigNumberish,
      _hedgeRateOfReturnThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpFutureMaxFundingRate(
      _perpFutureMaxFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualMarket(
      _perpetualMarket: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolMarginRiskParam(
      _poolMarginRiskParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadParams(
      _safetyPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSquaredPerpFundingMultiplier(
      _squaredPerpFundingMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeFeeRate(
      _tradeFeeRate: BigNumberish,
      _protocolFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber] & {
        tradePrice: [BigNumber, BigNumber];
        fundingPaidPerPosition: [BigNumber, BigNumber];
        protocolFee: BigNumber;
      }
    >;

    updatePoolSnapshot(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "FundingPayment(uint256,int256,int256,int256,int256)"(
      productId?: null,
      fundingRate?: null,
      amountFundingPaidPerPosition?: null,
      fundingPaidPerPosition?: null,
      poolReceived?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        productId: BigNumber;
        fundingRate: BigNumber;
        amountFundingPaidPerPosition: BigNumber;
        fundingPaidPerPosition: BigNumber;
        poolReceived: BigNumber;
      }
    >;

    FundingPayment(
      productId?: null,
      fundingRate?: null,
      amountFundingPaidPerPosition?: null,
      fundingPaidPerPosition?: null,
      poolReceived?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        productId: BigNumber;
        fundingRate: BigNumber;
        amountFundingPaidPerPosition: BigNumber;
        fundingPaidPerPosition: BigNumber;
        poolReceived: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetHedgeParams(uint256,uint256,uint256)"(
      minSlippageToleranceOfHedge?: null,
      maxSlippageToleranceOfHedge?: null,
      hedgeRateOfReturnThreshold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        minSlippageToleranceOfHedge: BigNumber;
        maxSlippageToleranceOfHedge: BigNumber;
        hedgeRateOfReturnThreshold: BigNumber;
      }
    >;

    SetHedgeParams(
      minSlippageToleranceOfHedge?: null,
      maxSlippageToleranceOfHedge?: null,
      hedgeRateOfReturnThreshold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        minSlippageToleranceOfHedge: BigNumber;
        maxSlippageToleranceOfHedge: BigNumber;
        hedgeRateOfReturnThreshold: BigNumber;
      }
    >;

    "SetPerpFutureMaxFundingRate(int256)"(
      perpFutureMaxFundingRate?: null
    ): TypedEventFilter<[BigNumber], { perpFutureMaxFundingRate: BigNumber }>;

    SetPerpFutureMaxFundingRate(
      perpFutureMaxFundingRate?: null
    ): TypedEventFilter<[BigNumber], { perpFutureMaxFundingRate: BigNumber }>;

    "SetPoolMarginRiskParam(int256)"(
      poolMarginRiskParam?: null
    ): TypedEventFilter<[BigNumber], { poolMarginRiskParam: BigNumber }>;

    SetPoolMarginRiskParam(
      poolMarginRiskParam?: null
    ): TypedEventFilter<[BigNumber], { poolMarginRiskParam: BigNumber }>;

    "SetSpreadParams(uint256,uint256)"(
      safetyPeriod?: null,
      numBlocksPerSpreadDecreasing?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { safetyPeriod: BigNumber; numBlocksPerSpreadDecreasing: BigNumber }
    >;

    SetSpreadParams(
      safetyPeriod?: null,
      numBlocksPerSpreadDecreasing?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { safetyPeriod: BigNumber; numBlocksPerSpreadDecreasing: BigNumber }
    >;

    "SetSquaredPerpFundingMultiplier(int256)"(
      squaredPerpFundingMultiplier?: null
    ): TypedEventFilter<
      [BigNumber],
      { squaredPerpFundingMultiplier: BigNumber }
    >;

    SetSquaredPerpFundingMultiplier(
      squaredPerpFundingMultiplier?: null
    ): TypedEventFilter<
      [BigNumber],
      { squaredPerpFundingMultiplier: BigNumber }
    >;

    "SetTradeFeeRate(int256,int256)"(
      tradeFeeRate?: null,
      protocolFeeRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tradeFeeRate: BigNumber; protocolFeeRate: BigNumber }
    >;

    SetTradeFeeRate(
      tradeFeeRate?: null,
      protocolFeeRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tradeFeeRate: BigNumber; protocolFeeRate: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "VarianceUpdated(int256,int256,uint256)"(
      variance?: null,
      underlyingPrice?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { variance: BigNumber; underlyingPrice: BigNumber; timestamp: BigNumber }
    >;

    VarianceUpdated(
      variance?: null,
      underlyingPrice?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { variance: BigNumber; underlyingPrice: BigNumber; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeFundingPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNettingInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAmountForHedging(overrides?: CallOverrides): Promise<BigNumber>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUtilizationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastHedgeSpotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolSnapshot(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgeParams(
      _minSlippageToleranceOfHedge: BigNumberish,
      _maxSlippageToleranceOfHedge: BigNumberish,
      _hedgeRateOfReturnThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerpFutureMaxFundingRate(
      _perpFutureMaxFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerpetualMarket(
      _perpetualMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolMarginRiskParam(
      _poolMarginRiskParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpreadParams(
      _safetyPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSquaredPerpFundingMultiplier(
      _squaredPerpFundingMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradeFeeRate(
      _tradeFeeRate: BigNumberish,
      _protocolFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolSnapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeFundingPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNettingInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUtilizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastHedgeSpotPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSnapshot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgeParams(
      _minSlippageToleranceOfHedge: BigNumberish,
      _maxSlippageToleranceOfHedge: BigNumberish,
      _hedgeRateOfReturnThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerpFutureMaxFundingRate(
      _perpFutureMaxFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualMarket(
      _perpetualMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolMarginRiskParam(
      _poolMarginRiskParam: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadParams(
      _safetyPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSquaredPerpFundingMultiplier(
      _squaredPerpFundingMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradeFeeRate(
      _tradeFeeRate: BigNumberish,
      _protocolFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSnapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

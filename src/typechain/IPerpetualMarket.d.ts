/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPerpetualMarketInterface extends ethers.utils.Interface {
  functions: {
    "addMargin(uint256,int256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "execHedge(bool,uint256)": FunctionFragment;
    "getLPTokenPrice(int256)": FunctionFragment;
    "getMinCollateralToAddPosition(uint256,int128[2])": FunctionFragment;
    "getTokenAmountForHedging()": FunctionFragment;
    "getTradePrice(uint256,int256[2])": FunctionFragment;
    "getTraderVault(uint256)": FunctionFragment;
    "getVaultStatus(uint256)": FunctionFragment;
    "initialize(uint256,int256)": FunctionFragment;
    "liquidateByPool(uint256)": FunctionFragment;
    "trade((uint256,tuple[],int256,uint256))": FunctionFragment;
    "withdraw(uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMargin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execHedge",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCollateralToAddPosition",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountForHedging",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePrice",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      {
        vaultId: BigNumberish;
        trades: {
          productId: BigNumberish;
          subVaultIndex: BigNumberish;
          tradeAmount: BigNumberish;
          limitPrice: BigNumberish;
          metadata: BytesLike;
        }[];
        marginAmount: BigNumberish;
        deadline: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execHedge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinCollateralToAddPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountForHedging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IPerpetualMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPerpetualMarketInterface;

  functions: {
    addMargin(
      _vaultId: BigNumberish,
      _marginToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execHedge(
      _withRebalance: boolean,
      _amountUsdc: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinCollateralToAddPosition(
      _vaultId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minCollateral: BigNumber }>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          tradePrice: BigNumber;
          indexPrice: BigNumber;
          fundingRate: BigNumber;
          tradeFee: BigNumber;
          protocolFee: BigNumber;
          fundingFee: BigNumber;
          totalValue: BigNumber;
          totalFee: BigNumber;
        }
      ] & {
        tradePriceInfo: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          tradePrice: BigNumber;
          indexPrice: BigNumber;
          fundingRate: BigNumber;
          tradeFee: BigNumber;
          protocolFee: BigNumber;
          fundingFee: BigNumber;
          totalValue: BigNumber;
          totalFee: BigNumber;
        };
      }
    >;

    getTraderVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          ([
            [BigNumber, BigNumber],
            [BigNumber, BigNumber],
            [BigNumber, BigNumber]
          ] & {
            positionPerpetuals: [BigNumber, BigNumber];
            entryPrices: [BigNumber, BigNumber];
            entryFundingFee: [BigNumber, BigNumber];
          })[]
        ] & {
          positionUsdc: BigNumber;
          subVaults: ([
            [BigNumber, BigNumber],
            [BigNumber, BigNumber],
            [BigNumber, BigNumber]
          ] & {
            positionPerpetuals: [BigNumber, BigNumber];
            entryPrices: [BigNumber, BigNumber];
            entryFundingFee: [BigNumber, BigNumber];
          })[];
        }
      ]
    >;

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber][],
          [BigNumber, BigNumber][],
          [
            BigNumber,
            ([
              [BigNumber, BigNumber],
              [BigNumber, BigNumber],
              [BigNumber, BigNumber]
            ] & {
              positionPerpetuals: [BigNumber, BigNumber];
              entryPrices: [BigNumber, BigNumber];
              entryFundingFee: [BigNumber, BigNumber];
            })[]
          ] & {
            positionUsdc: BigNumber;
            subVaults: ([
              [BigNumber, BigNumber],
              [BigNumber, BigNumber],
              [BigNumber, BigNumber]
            ] & {
              positionPerpetuals: [BigNumber, BigNumber];
              entryPrices: [BigNumber, BigNumber];
              entryFundingFee: [BigNumber, BigNumber];
            })[];
          }
        ] & {
          positionValue: BigNumber;
          minCollateral: BigNumber;
          positionValues: [BigNumber, BigNumber][];
          fundingPaid: [BigNumber, BigNumber][];
          rawVaultData: [
            BigNumber,
            ([
              [BigNumber, BigNumber],
              [BigNumber, BigNumber],
              [BigNumber, BigNumber]
            ] & {
              positionPerpetuals: [BigNumber, BigNumber];
              entryPrices: [BigNumber, BigNumber];
              entryFundingFee: [BigNumber, BigNumber];
            })[]
          ] & {
            positionUsdc: BigNumber;
            subVaults: ([
              [BigNumber, BigNumber],
              [BigNumber, BigNumber],
              [BigNumber, BigNumber]
            ] & {
              positionPerpetuals: [BigNumber, BigNumber];
              entryPrices: [BigNumber, BigNumber];
              entryFundingFee: [BigNumber, BigNumber];
            })[];
          };
        }
      ]
    >;

    initialize(
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateByPool(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trade(
      _tradeParams: {
        vaultId: BigNumberish;
        trades: {
          productId: BigNumberish;
          subVaultIndex: BigNumberish;
          tradeAmount: BigNumberish;
          limitPrice: BigNumberish;
          metadata: BytesLike;
        }[];
        marginAmount: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMargin(
    _vaultId: BigNumberish,
    _marginToAdd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execHedge(
    _withRebalance: boolean,
    _amountUsdc: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLPTokenPrice(
    _deltaLiquidityAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinCollateralToAddPosition(
    _vaultId: BigNumberish,
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAmountForHedging(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber]>;

  getTradePrice(
    _productId: BigNumberish,
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tradePrice: BigNumber;
      indexPrice: BigNumber;
      fundingRate: BigNumber;
      tradeFee: BigNumber;
      protocolFee: BigNumber;
      fundingFee: BigNumber;
      totalValue: BigNumber;
      totalFee: BigNumber;
    }
  >;

  getTraderVault(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      ([
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber]
      ] & {
        positionPerpetuals: [BigNumber, BigNumber];
        entryPrices: [BigNumber, BigNumber];
        entryFundingFee: [BigNumber, BigNumber];
      })[]
    ] & {
      positionUsdc: BigNumber;
      subVaults: ([
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber]
      ] & {
        positionPerpetuals: [BigNumber, BigNumber];
        entryPrices: [BigNumber, BigNumber];
        entryFundingFee: [BigNumber, BigNumber];
      })[];
    }
  >;

  getVaultStatus(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber][],
      [BigNumber, BigNumber][],
      [
        BigNumber,
        ([
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        })[]
      ] & {
        positionUsdc: BigNumber;
        subVaults: ([
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        })[];
      }
    ] & {
      positionValue: BigNumber;
      minCollateral: BigNumber;
      positionValues: [BigNumber, BigNumber][];
      fundingPaid: [BigNumber, BigNumber][];
      rawVaultData: [
        BigNumber,
        ([
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        })[]
      ] & {
        positionUsdc: BigNumber;
        subVaults: ([
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        })[];
      };
    }
  >;

  initialize(
    _depositAmount: BigNumberish,
    _initialFundingRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateByPool(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trade(
    _tradeParams: {
      vaultId: BigNumberish;
      trades: {
        productId: BigNumberish;
        subVaultIndex: BigNumberish;
        tradeAmount: BigNumberish;
        limitPrice: BigNumberish;
        metadata: BytesLike;
      }[];
      marginAmount: BigNumberish;
      deadline: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _withdrawnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMargin(
      _vaultId: BigNumberish,
      _marginToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execHedge(
      _withRebalance: boolean,
      _amountUsdc: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinCollateralToAddPosition(
      _vaultId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tradePrice: BigNumber;
        indexPrice: BigNumber;
        fundingRate: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
        fundingFee: BigNumber;
        totalValue: BigNumber;
        totalFee: BigNumber;
      }
    >;

    getTraderVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        })[]
      ] & {
        positionUsdc: BigNumber;
        subVaults: ([
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        })[];
      }
    >;

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber][],
        [BigNumber, BigNumber][],
        [
          BigNumber,
          ([
            [BigNumber, BigNumber],
            [BigNumber, BigNumber],
            [BigNumber, BigNumber]
          ] & {
            positionPerpetuals: [BigNumber, BigNumber];
            entryPrices: [BigNumber, BigNumber];
            entryFundingFee: [BigNumber, BigNumber];
          })[]
        ] & {
          positionUsdc: BigNumber;
          subVaults: ([
            [BigNumber, BigNumber],
            [BigNumber, BigNumber],
            [BigNumber, BigNumber]
          ] & {
            positionPerpetuals: [BigNumber, BigNumber];
            entryPrices: [BigNumber, BigNumber];
            entryFundingFee: [BigNumber, BigNumber];
          })[];
        }
      ] & {
        positionValue: BigNumber;
        minCollateral: BigNumber;
        positionValues: [BigNumber, BigNumber][];
        fundingPaid: [BigNumber, BigNumber][];
        rawVaultData: [
          BigNumber,
          ([
            [BigNumber, BigNumber],
            [BigNumber, BigNumber],
            [BigNumber, BigNumber]
          ] & {
            positionPerpetuals: [BigNumber, BigNumber];
            entryPrices: [BigNumber, BigNumber];
            entryFundingFee: [BigNumber, BigNumber];
          })[]
        ] & {
          positionUsdc: BigNumber;
          subVaults: ([
            [BigNumber, BigNumber],
            [BigNumber, BigNumber],
            [BigNumber, BigNumber]
          ] & {
            positionPerpetuals: [BigNumber, BigNumber];
            entryPrices: [BigNumber, BigNumber];
            entryFundingFee: [BigNumber, BigNumber];
          })[];
        };
      }
    >;

    initialize(
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByPool(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    trade(
      _tradeParams: {
        vaultId: BigNumberish;
        trades: {
          productId: BigNumberish;
          subVaultIndex: BigNumberish;
          tradeAmount: BigNumberish;
          limitPrice: BigNumberish;
          metadata: BytesLike;
        }[];
        marginAmount: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _withdrawnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addMargin(
      _vaultId: BigNumberish,
      _marginToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execHedge(
      _withRebalance: boolean,
      _amountUsdc: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinCollateralToAddPosition(
      _vaultId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmountForHedging(overrides?: CallOverrides): Promise<BigNumber>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateByPool(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trade(
      _tradeParams: {
        vaultId: BigNumberish;
        trades: {
          productId: BigNumberish;
          subVaultIndex: BigNumberish;
          tradeAmount: BigNumberish;
          limitPrice: BigNumberish;
          metadata: BytesLike;
        }[];
        marginAmount: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMargin(
      _vaultId: BigNumberish,
      _marginToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execHedge(
      _withRebalance: boolean,
      _amountUsdc: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinCollateralToAddPosition(
      _vaultId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderVault(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateByPool(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trade(
      _tradeParams: {
        vaultId: BigNumberish;
        trades: {
          productId: BigNumberish;
          subVaultIndex: BigNumberish;
          tradeAmount: BigNumberish;
          limitPrice: BigNumberish;
          metadata: BytesLike;
        }[];
        marginAmount: BigNumberish;
        deadline: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

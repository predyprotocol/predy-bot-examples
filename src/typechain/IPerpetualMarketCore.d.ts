/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPerpetualMarketCoreInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "completeHedgingProcedure((uint256,uint256,uint256,bool))": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "executeFundingPayment()": FunctionFragment;
    "getLPTokenPrice(int256)": FunctionFragment;
    "getTokenAmountForHedging()": FunctionFragment;
    "getTradePrice(uint256,int256[2])": FunctionFragment;
    "getTradePriceInfo(int256[2])": FunctionFragment;
    "initialize(address,uint256,int256)": FunctionFragment;
    "rebalance()": FunctionFragment;
    "updatePoolPositions(int256[2])": FunctionFragment;
    "updatePoolSnapshot()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeHedgingProcedure",
    values: [
      {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFundingPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountForHedging",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePrice",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePriceInfo",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePoolPositions",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeHedgingProcedure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountForHedging",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IPerpetualMarketCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPerpetualMarketCoreInterface;

  functions: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeFundingPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          amountUsdc: BigNumber;
          amountUnderlying: BigNumber;
          futureWeight: BigNumber;
          isLong: boolean;
        }
      ] & {
        completeParams: [BigNumber, BigNumber, BigNumber, boolean] & {
          amountUsdc: BigNumber;
          amountUnderlying: BigNumber;
          futureWeight: BigNumber;
          isLong: boolean;
        };
      }
    >;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          spotPrice: BigNumber;
          tradePrices: [BigNumber, BigNumber];
          fundingRates: [BigNumber, BigNumber];
          amountsFundingPaidPerPosition: [BigNumber, BigNumber];
        }
      ]
    >;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePoolSnapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeHedgingProcedure(
    _completeParams: {
      amountUsdc: BigNumberish;
      amountUnderlying: BigNumberish;
      futureWeight: BigNumberish;
      isLong: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _depositor: string,
    _depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeFundingPayment(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLPTokenPrice(
    _deltaLiquidityAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAmountForHedging(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amountUsdc: BigNumber;
      amountUnderlying: BigNumber;
      futureWeight: BigNumber;
      isLong: boolean;
    }
  >;

  getTradePrice(
    _productId: BigNumberish,
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTradePriceInfo(
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber, BigNumber],
      [BigNumber, BigNumber],
      [BigNumber, BigNumber]
    ] & {
      spotPrice: BigNumber;
      tradePrices: [BigNumber, BigNumber];
      fundingRates: [BigNumber, BigNumber];
      amountsFundingPaidPerPosition: [BigNumber, BigNumber];
    }
  >;

  initialize(
    _depositor: string,
    _depositAmount: BigNumberish,
    _initialFundingRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolPositions(
    _tradeAmounts: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePoolSnapshot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _withdrawer: string,
    _withdrawnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeFundingPayment(overrides?: CallOverrides): Promise<void>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amountUsdc: BigNumber;
        amountUnderlying: BigNumber;
        futureWeight: BigNumber;
        isLong: boolean;
      }
    >;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber]
      ] & {
        spotPrice: BigNumber;
        tradePrices: [BigNumber, BigNumber];
        fundingRates: [BigNumber, BigNumber];
        amountsFundingPaidPerPosition: [BigNumber, BigNumber];
      }
    >;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber], [BigNumber, BigNumber], BigNumber] & {
        tradePrice: [BigNumber, BigNumber];
        protocolFee: BigNumber;
      }
    >;

    updatePoolSnapshot(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeFundingPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmountForHedging(overrides?: CallOverrides): Promise<BigNumber>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePoolSnapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeHedgingProcedure(
      _completeParams: {
        amountUsdc: BigNumberish;
        amountUnderlying: BigNumberish;
        futureWeight: BigNumberish;
        isLong: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _depositor: string,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeFundingPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLPTokenPrice(
      _deltaLiquidityAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmountForHedging(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePrice(
      _productId: BigNumberish,
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePriceInfo(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _depositor: string,
      _depositAmount: BigNumberish,
      _initialFundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolPositions(
      _tradeAmounts: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolSnapshot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawer: string,
      _withdrawnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

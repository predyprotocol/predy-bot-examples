/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TraderVaultLibTesterInterface extends ethers.utils.Interface {
  functions: {
    "clear()": FunctionFragment;
    "getMinCollateral((uint128,int256[2],int256[2],int256[2]))": FunctionFragment;
    "getNumOfSubVault()": FunctionFragment;
    "getPositionValue((uint128,int256[2],int256[2],int256[2]))": FunctionFragment;
    "getSubVault(uint256)": FunctionFragment;
    "r()": FunctionFragment;
    "traderVault()": FunctionFragment;
    "verifyCheckVaultIsDanger((uint128,int256[2],int256[2],int256[2]))": FunctionFragment;
    "verifyDecreaseLiquidationReward(int256,int256)": FunctionFragment;
    "verifyGetMinCollateralToAddPosition(int128[2],(uint128,int256[2],int256[2],int256[2]))": FunctionFragment;
    "verifyUpdateUsdcPosition(int256,(uint128,int256[2],int256[2],int256[2]))": FunctionFragment;
    "verifyUpdateVault(uint256,uint256,int128,uint256,int128)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "clear", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinCollateral",
    values: [
      {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumOfSubVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionValue",
    values: [
      {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "r", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "traderVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCheckVaultIsDanger",
    values: [
      {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDecreaseLiquidationReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyGetMinCollateralToAddPosition",
    values: [
      [BigNumberish, BigNumberish],
      {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUpdateUsdcPosition",
    values: [
      BigNumberish,
      {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUpdateVault",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfSubVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traderVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCheckVaultIsDanger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDecreaseLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyGetMinCollateralToAddPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyUpdateUsdcPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyUpdateVault",
    data: BytesLike
  ): Result;

  events: {};
}

export class TraderVaultLibTester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TraderVaultLibTesterInterface;

  functions: {
    clear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinCollateral(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumOfSubVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionValue(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubVault(
      _subVaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, BigNumber],
          [BigNumber, BigNumber],
          [BigNumber, BigNumber]
        ] & {
          positionPerpetuals: [BigNumber, BigNumber];
          entryPrices: [BigNumber, BigNumber];
          entryFundingFee: [BigNumber, BigNumber];
        }
      ]
    >;

    r(overrides?: CallOverrides): Promise<[BigNumber]>;

    traderVault(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { positionUsdc: BigNumber }>;

    verifyCheckVaultIsDanger(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyDecreaseLiquidationReward(
      _minCollateral: BigNumberish,
      liquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyGetMinCollateralToAddPosition(
      _tradeAmounts: [BigNumberish, BigNumberish],
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyUpdateUsdcPosition(
      _amount: BigNumberish,
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyUpdateVault(
      _subVaultId: BigNumberish,
      _productId: BigNumberish,
      _amountAsset: BigNumberish,
      _tradePrice: BigNumberish,
      _fundingFeePerPosition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clear(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinCollateral(
    _tradePriceInfo: {
      spotPrice: BigNumberish;
      tradePrices: [BigNumberish, BigNumberish];
      fundingRates: [BigNumberish, BigNumberish];
      amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumOfSubVault(overrides?: CallOverrides): Promise<BigNumber>;

  getPositionValue(
    _tradePriceInfo: {
      spotPrice: BigNumberish;
      tradePrices: [BigNumberish, BigNumberish];
      fundingRates: [BigNumberish, BigNumberish];
      amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubVault(
    _subVaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber, BigNumber], [BigNumber, BigNumber], [BigNumber, BigNumber]] & {
      positionPerpetuals: [BigNumber, BigNumber];
      entryPrices: [BigNumber, BigNumber];
      entryFundingFee: [BigNumber, BigNumber];
    }
  >;

  r(overrides?: CallOverrides): Promise<BigNumber>;

  traderVault(overrides?: CallOverrides): Promise<BigNumber>;

  verifyCheckVaultIsDanger(
    _tradePriceInfo: {
      spotPrice: BigNumberish;
      tradePrices: [BigNumberish, BigNumberish];
      fundingRates: [BigNumberish, BigNumberish];
      amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyDecreaseLiquidationReward(
    _minCollateral: BigNumberish,
    liquidationFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyGetMinCollateralToAddPosition(
    _tradeAmounts: [BigNumberish, BigNumberish],
    _tradePriceInfo: {
      spotPrice: BigNumberish;
      tradePrices: [BigNumberish, BigNumberish];
      fundingRates: [BigNumberish, BigNumberish];
      amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyUpdateUsdcPosition(
    _amount: BigNumberish,
    _tradePriceInfo: {
      spotPrice: BigNumberish;
      tradePrices: [BigNumberish, BigNumberish];
      fundingRates: [BigNumberish, BigNumberish];
      amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyUpdateVault(
    _subVaultId: BigNumberish,
    _productId: BigNumberish,
    _amountAsset: BigNumberish,
    _tradePrice: BigNumberish,
    _fundingFeePerPosition: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clear(overrides?: CallOverrides): Promise<void>;

    getMinCollateral(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumOfSubVault(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionValue(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubVault(
      _subVaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber],
        [BigNumber, BigNumber],
        [BigNumber, BigNumber]
      ] & {
        positionPerpetuals: [BigNumber, BigNumber];
        entryPrices: [BigNumber, BigNumber];
        entryFundingFee: [BigNumber, BigNumber];
      }
    >;

    r(overrides?: CallOverrides): Promise<BigNumber>;

    traderVault(overrides?: CallOverrides): Promise<BigNumber>;

    verifyCheckVaultIsDanger(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyDecreaseLiquidationReward(
      _minCollateral: BigNumberish,
      liquidationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyGetMinCollateralToAddPosition(
      _tradeAmounts: [BigNumberish, BigNumberish],
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyUpdateUsdcPosition(
      _amount: BigNumberish,
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    verifyUpdateVault(
      _subVaultId: BigNumberish,
      _productId: BigNumberish,
      _amountAsset: BigNumberish,
      _tradePrice: BigNumberish,
      _fundingFeePerPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    clear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinCollateral(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumOfSubVault(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionValue(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubVault(
      _subVaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    r(overrides?: CallOverrides): Promise<BigNumber>;

    traderVault(overrides?: CallOverrides): Promise<BigNumber>;

    verifyCheckVaultIsDanger(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyDecreaseLiquidationReward(
      _minCollateral: BigNumberish,
      liquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyGetMinCollateralToAddPosition(
      _tradeAmounts: [BigNumberish, BigNumberish],
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyUpdateUsdcPosition(
      _amount: BigNumberish,
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyUpdateVault(
      _subVaultId: BigNumberish,
      _productId: BigNumberish,
      _amountAsset: BigNumberish,
      _tradePrice: BigNumberish,
      _fundingFeePerPosition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clear(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinCollateral(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumOfSubVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionValue(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubVault(
      _subVaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traderVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyCheckVaultIsDanger(
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyDecreaseLiquidationReward(
      _minCollateral: BigNumberish,
      liquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyGetMinCollateralToAddPosition(
      _tradeAmounts: [BigNumberish, BigNumberish],
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyUpdateUsdcPosition(
      _amount: BigNumberish,
      _tradePriceInfo: {
        spotPrice: BigNumberish;
        tradePrices: [BigNumberish, BigNumberish];
        fundingRates: [BigNumberish, BigNumberish];
        amountsFundingPaidPerPosition: [BigNumberish, BigNumberish];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyUpdateVault(
      _subVaultId: BigNumberish,
      _productId: BigNumberish,
      _amountAsset: BigNumberish,
      _tradePrice: BigNumberish,
      _fundingFeePerPosition: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SpreadLibTesterInterface extends ethers.utils.Interface {
  functions: {
    "getUpdatedPrice((uint128,int128,uint128,int128,uint256,uint256),bool,int256,uint128)": FunctionFragment;
    "info()": FunctionFragment;
    "init()": FunctionFragment;
    "setParams(uint256,uint256)": FunctionFragment;
    "updatePrice(bool,int256,uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getUpdatedPrice",
    values: [
      {
        blockLastLongTransaction: BigNumberish;
        minLongTradePrice: BigNumberish;
        blockLastShortTransaction: BigNumberish;
        maxShortTradePrice: BigNumberish;
        safetyBlockPeriod: BigNumberish;
        numBlocksPerSpreadDecreasing: BigNumberish;
      },
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUpdatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class SpreadLibTester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SpreadLibTesterInterface;

  functions: {
    getUpdatedPrice(
      _info: {
        blockLastLongTransaction: BigNumberish;
        minLongTradePrice: BigNumberish;
        blockLastShortTransaction: BigNumberish;
        maxShortTradePrice: BigNumberish;
        safetyBlockPeriod: BigNumberish;
        numBlocksPerSpreadDecreasing: BigNumberish;
      },
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { updatedPrice: BigNumber }>;

    info(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockLastLongTransaction: BigNumber;
        minLongTradePrice: BigNumber;
        blockLastShortTransaction: BigNumber;
        maxShortTradePrice: BigNumber;
        safetyBlockPeriod: BigNumber;
        numBlocksPerSpreadDecreasing: BigNumber;
      }
    >;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _safetyBlockPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getUpdatedPrice(
    _info: {
      blockLastLongTransaction: BigNumberish;
      minLongTradePrice: BigNumberish;
      blockLastShortTransaction: BigNumberish;
      maxShortTradePrice: BigNumberish;
      safetyBlockPeriod: BigNumberish;
      numBlocksPerSpreadDecreasing: BigNumberish;
    },
    _isLong: boolean,
    _price: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  info(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockLastLongTransaction: BigNumber;
      minLongTradePrice: BigNumber;
      blockLastShortTransaction: BigNumber;
      maxShortTradePrice: BigNumber;
      safetyBlockPeriod: BigNumber;
      numBlocksPerSpreadDecreasing: BigNumber;
    }
  >;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _safetyBlockPeriod: BigNumberish,
    _numBlocksPerSpreadDecreasing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    _isLong: boolean,
    _price: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getUpdatedPrice(
      _info: {
        blockLastLongTransaction: BigNumberish;
        minLongTradePrice: BigNumberish;
        blockLastShortTransaction: BigNumberish;
        maxShortTradePrice: BigNumberish;
        safetyBlockPeriod: BigNumberish;
        numBlocksPerSpreadDecreasing: BigNumberish;
      },
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockLastLongTransaction: BigNumber;
        minLongTradePrice: BigNumber;
        blockLastShortTransaction: BigNumber;
        maxShortTradePrice: BigNumber;
        safetyBlockPeriod: BigNumber;
        numBlocksPerSpreadDecreasing: BigNumber;
      }
    >;

    init(overrides?: CallOverrides): Promise<void>;

    setParams(
      _safetyBlockPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getUpdatedPrice(
      _info: {
        blockLastLongTransaction: BigNumberish;
        minLongTradePrice: BigNumberish;
        blockLastShortTransaction: BigNumberish;
        maxShortTradePrice: BigNumberish;
        safetyBlockPeriod: BigNumberish;
        numBlocksPerSpreadDecreasing: BigNumberish;
      },
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParams(
      _safetyBlockPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePrice(
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getUpdatedPrice(
      _info: {
        blockLastLongTransaction: BigNumberish;
        minLongTradePrice: BigNumberish;
        blockLastShortTransaction: BigNumberish;
        maxShortTradePrice: BigNumberish;
        safetyBlockPeriod: BigNumberish;
        numBlocksPerSpreadDecreasing: BigNumberish;
      },
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _safetyBlockPeriod: BigNumberish,
      _numBlocksPerSpreadDecreasing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _isLong: boolean,
      _price: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

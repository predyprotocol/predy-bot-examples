/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MathTester, MathTesterInterface } from "../MathTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "_y",
        type: "int256",
      },
    ],
    name: "testAddDelta",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_x",
        type: "int256",
      },
    ],
    name: "testExp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "testLog",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_x",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_y",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "_d",
        type: "int256",
      },
      {
        internalType: "bool",
        name: "_roundUp",
        type: "bool",
      },
    ],
    name: "testMulDiv",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_to",
        type: "uint256",
      },
    ],
    name: "testScale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061098a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631a05aedd1461005c5780632818a7d71461008b5780635ac1b16a146100ae578063a868c6aa146100cb578063d6ef14e7146100f4575b600080fd5b6100796004803603602081101561007257600080fd5b5035610125565b60408051918252519081900360200190f35b610079600480360360408110156100a157600080fd5b5080359060200135610138565b610079600480360360208110156100c457600080fd5b503561014d565b610079600480360360608110156100e157600080fd5b5080359060208101359060400135610158565b6100796004803603608081101561010a57600080fd5b5080359060208101359060408101359060600135151561016f565b600061013082610186565b90505b919050565b600061014483836101d9565b90505b92915050565b600061013082610267565b60006101658484846102e2565b90505b9392505050565b600061017d85858585610398565b95945050505050565b6000816000136101a057610199826103ef565b9050610133565b640177825eff198212156101b657506000610133565b6101996101c5836000036103ef565b6101d36305f5e100806104f8565b90610551565b600080821215610229578282600003840391508110610224576040805162461bcd60e51b815260206004820152600260248201526104d360f41b604482015290519081900360640190fd5b610147565b5080820182811015610147576040805162461bcd60e51b81526020600482015260026024820152614d3160f01b604482015290519081900360640190fd5b60008080805b60088110156102d957600061028184610186565b90506102bb6102b461029388846105b8565b6102ae6305f5e1006102a86002818d8961061d565b90610682565b9061072b565b85906105b8565b9250838314156102cb57506102d9565b50909150819060010161026d565b50909392505050565b60008183111561033e57604682840310610328576040805162461bcd60e51b8152602060048201526002602482015261269960f11b604482015290519081900360640190fd5b61033784838503600a0a610551565b9050610168565b8183101561039157604683830310610382576040805162461bcd60e51b8152602060048201526002602482015261269960f11b604482015290519081900360640190fd5b61033784848403600a0a6104f8565b5082610168565b60008082156103d457600084868802816103ae57fe5b07905060008113156103c357600191506103d2565b60008112156103d25760001991505b505b60008185878902816103e257fe5b0501979650505050505050565b60008161040157506305f5e100610133565b6402540be400821115610440576040805162461bcd60e51b8152602060048201526002602482015261134d60f21b604482015290519081900360640190fd5b60006305f5e10061046161045c630421a89e6101d387856104f8565b6107e3565b8161046857fe5b049050600281900a600061048a61048384630421a89e6104f8565b86906107ef565b90506305f5e100600060105b80156104e2576104c76305f5e1006104c16305f5e1006101d38589816104b857fe5b899190046104f8565b9061084c565b9250818314156104d6576104e2565b82915060001901610496565b506104ed84836104f8565b979650505050505050565b60008261050757506000610147565b8282028284828161051457fe5b04146101445760405162461bcd60e51b81526004018080602001828103825260218152602001806108e96021913960400191505060405180910390fd5b60008082116105a7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816105b057fe5b049392505050565b60008282018183128015906105cd5750838112155b806105e257506000831280156105e257508381125b6101445760405162461bcd60e51b81526004018080602001828103825260218152602001806108a76021913960400191505060405180910390fd5b60008183038183128015906106325750838113155b80610647575060008312801561064757508381135b6101445760405162461bcd60e51b81526004018080602001828103825260248152602001806109316024913960400191505060405180910390fd5b60008261069157506000610147565b826000191480156106a55750600160ff1b82145b156106e15760405162461bcd60e51b815260040180806020018281038252602781526020018061090a6027913960400191505060405180910390fd5b828202828482816106ee57fe5b05146101445760405162461bcd60e51b815260040180806020018281038252602781526020018061090a6027913960400191505060405180910390fd5b60008161077f576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b816000191480156107935750600160ff1b83145b156107cf5760405162461bcd60e51b81526004018080602001828103825260218152602001806108c86021913960400191505060405180910390fd5b60008284816107da57fe5b05949350505050565b6305f5e1008106900390565b600082821115610846576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610144576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a2646970667358221220d419a043647bbf8dd4ef9d1f594bc9f915c82298b5cff5f9e0ff523172ded52964736f6c63430007060033";

export class MathTester__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathTester> {
    return super.deploy(overrides || {}) as Promise<MathTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MathTester {
    return super.attach(address) as MathTester;
  }
  connect(signer: Signer): MathTester__factory {
    return super.connect(signer) as MathTester__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathTesterInterface {
    return new utils.Interface(_abi) as MathTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathTester {
    return new Contract(address, _abi, signerOrProvider) as MathTester;
  }
}

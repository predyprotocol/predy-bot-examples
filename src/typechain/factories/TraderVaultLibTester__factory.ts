/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TraderVaultLibTester,
  TraderVaultLibTesterInterface,
} from "../TraderVaultLibTester";

const _abi = [
  {
    inputs: [],
    name: "clear",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "spotPrice",
            type: "uint128",
          },
          {
            internalType: "int256[2]",
            name: "tradePrices",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "fundingRates",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "amountsFundingPaidPerPosition",
            type: "int256[2]",
          },
        ],
        internalType: "struct IPerpetualMarketCore.TradePriceInfo",
        name: "_tradePriceInfo",
        type: "tuple",
      },
    ],
    name: "getMinCollateral",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumOfSubVault",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "spotPrice",
            type: "uint128",
          },
          {
            internalType: "int256[2]",
            name: "tradePrices",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "fundingRates",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "amountsFundingPaidPerPosition",
            type: "int256[2]",
          },
        ],
        internalType: "struct IPerpetualMarketCore.TradePriceInfo",
        name: "_tradePriceInfo",
        type: "tuple",
      },
    ],
    name: "getPositionValue",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subVaultId",
        type: "uint256",
      },
    ],
    name: "getSubVault",
    outputs: [
      {
        components: [
          {
            internalType: "int128[2]",
            name: "positionPerpetuals",
            type: "int128[2]",
          },
          {
            internalType: "uint128[2]",
            name: "entryPrices",
            type: "uint128[2]",
          },
          {
            internalType: "int256[2]",
            name: "entryFundingFee",
            type: "int256[2]",
          },
        ],
        internalType: "struct TraderVaultLib.SubVault",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "r",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "traderVault",
    outputs: [
      {
        internalType: "int128",
        name: "positionUsdc",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "spotPrice",
            type: "uint128",
          },
          {
            internalType: "int256[2]",
            name: "tradePrices",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "fundingRates",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "amountsFundingPaidPerPosition",
            type: "int256[2]",
          },
        ],
        internalType: "struct IPerpetualMarketCore.TradePriceInfo",
        name: "_tradePriceInfo",
        type: "tuple",
      },
    ],
    name: "verifyCheckVaultIsDanger",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_minCollateral",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "liquidationFee",
        type: "int256",
      },
    ],
    name: "verifyDecreaseLiquidationReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128[2]",
        name: "_tradeAmounts",
        type: "int128[2]",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "spotPrice",
            type: "uint128",
          },
          {
            internalType: "int256[2]",
            name: "tradePrices",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "fundingRates",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "amountsFundingPaidPerPosition",
            type: "int256[2]",
          },
        ],
        internalType: "struct IPerpetualMarketCore.TradePriceInfo",
        name: "_tradePriceInfo",
        type: "tuple",
      },
    ],
    name: "verifyGetMinCollateralToAddPosition",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_amount",
        type: "int256",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "spotPrice",
            type: "uint128",
          },
          {
            internalType: "int256[2]",
            name: "tradePrices",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "fundingRates",
            type: "int256[2]",
          },
          {
            internalType: "int256[2]",
            name: "amountsFundingPaidPerPosition",
            type: "int256[2]",
          },
        ],
        internalType: "struct IPerpetualMarketCore.TradePriceInfo",
        name: "_tradePriceInfo",
        type: "tuple",
      },
    ],
    name: "verifyUpdateUsdcPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subVaultId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_productId",
        type: "uint256",
      },
      {
        internalType: "int128",
        name: "_amountAsset",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "_tradePrice",
        type: "uint256",
      },
      {
        internalType: "int128",
        name: "_fundingFeePerPosition",
        type: "int128",
      },
    ],
    name: "verifyUpdateVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506118dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806352efea6e1161007157806352efea6e146101475780636c8ae38c1461014f57806381cd834e14610157578063a03678031461016a578063c986f1551461018a578063e81d15bc1461019d576100b4565b80631608eecb146100b95780631f45282d146100ce57806330050fbd146100f75780633333f5fc146101175780633e4755d71461011f57806351ed0ee314610132575b600080fd5b6100cc6100c736600461154c565b6101b0565b005b6100e16100dc36600461149b565b610246565b6040516100ee9190611681565b60405180910390f35b61010a6101053660046115d8565b6103c4565b6040516100ee919061168a565b6100e16104ed565b6100cc61012d36600461156d565b6104f3565b61013a610586565b6040516100ee9190611673565b6100cc61058f565b6100e16105b8565b6100e16101653660046115bd565b6105be565b61017d6101783660046115bd565b610732565b6040516100ee9190611668565b6100cc6101983660046115f0565b6108a6565b6100e16101ab3660046115bd565b610940565b60405163652aa48360e01b815273__$d529c113b49f05715913138dde996bfccf$__9063652aa483906101ec9060009086908690600401611703565b60206040518083038186803b15801561020457600080fd5b505af4158015610218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023c9190611534565b600f0b6002555050565b60408051808201825260008054600f90810b810b900b825260018054845160208281028201810190965281815292946103bb94938693828601939192909190859084015b828210156103ac576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f010492830192600103820291508084116102c1575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f0104928301926001038202915080841161031d5750505092845250506040805180820191829052602090930192915060028481019182845b815481526020019060010190808311610381575050505050815250508152602001906001019061028a565b50505050815250508484610ab4565b90505b92915050565b6103cc6112ce565b60018054839081106103da57fe5b600091825260209091206040805160a08101909152916004020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f01049283019260010382029150808411610409575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116104655750505092845250506040805180820191829052602090930192915060028481019182845b8154815260200190600101908083116104c95750505050508152505090505b919050565b60015490565b60405163e69e266d60e01b815273__$d529c113b49f05715913138dde996bfccf$__9063e69e266d9061052f9060009086908690600401611719565b60206040518083038186803b15801561054757600080fd5b505af415801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190611534565b6002555050565b600054600f0b81565b600080546fffffffffffffffffffffffffffffffff19168155806105b4600182611300565b5050565b60025481565b60408051808201825260008054600f90810b810b900b825260018054845160208281028201810190965281815292946103be94938693828601939192909190859084015b82821015610724576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f01049283019260010382029150808411610639575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116106955750505092845250506040805180820191829052602090930192915060028481019182845b8154815260200190600101908083116106f95750505050508152505081526020019060010190610602565b505050508152505083610b3e565b60408051808201825260008054600f90810b810b900b825260018054845160208281028201810190965281815292946103be94938693828601939192909190859084015b82821015610898576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f010492830192600103820291508084116107ad575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f010492830192600103820291508084116108095750505092845250506040805180820191829052602090930192915060028481019182845b81548152602001906001019080831161086d5750505050508152505081526020019060010190610776565b505050508152505083610b5e565b60405163a8ffb3b960e01b815273__$d529c113b49f05715913138dde996bfccf$__9063a8ffb3b9906108e89060009089908990899089908990600401611779565b604080518083038186803b1580156108ff57600080fd5b505af4158015610913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610937919061159a565b50505050505050565b60408051808201825260008054600f90810b810b900b825260018054845160208281028201810190965281815292946103be94938693828601939192909190859084015b82821015610aa6576000848152602090206040805160a0810190915290600484020181606081018260028282826020028201916000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f010492830192600103820291508084116109bb575050509284525050604080518082019182905260209093019291506001840190600290826000855b82829054906101000a90046001600160801b03166001600160801b031681526020019060100190602082600f01049283019260010382029150808411610a175750505092845250506040805180820191829052602090930192915060028481019182845b815481526020019060010190808311610a7b5750505050508152505081526020019060010190610984565b505050508152505083610b7f565b600080610ac085610bd3565b905060005b6002811015610b2a57610b07610b02868360028110610ae057fe5b6020020151600f0b848460028110610af457fe5b6020020151600f0b90610c1a565b610c7f565b828260028110610b1357fe5b600f92830b90920b60209092020152600101610ac5565b50610b358184610ce4565b95945050505050565b600080610b4a84610bd3565b9050610b568184610ce4565b949350505050565b600080610b6b8484610b7f565b9050610b778484610b3e565b139392505050565b8151600090600f0b815b846020015151811015610bcb57610bc1610bba86602001518381518110610bac57fe5b602002602001015186610e6b565b8390610c1a565b9150600101610b89565b509392505050565b610bdb611324565b60005b6002811015610c1457610bf18382610e88565b828260028110610bfd57fe5b600f92830b90920b60209092020152600101610bde565b50919050565b6000828201818312801590610c2f5750838112155b80610c445750600083128015610c4457508381125b6103bb5760405162461bcd60e51b81526004018080602001828103825260218152602001806117d26021913960400191505060405180910390fd5b60006f7fffffffffffffffffffffffffffffff198212158015610ca557506001607f1b82125b610ce05760405162461bcd60e51b81526004018080602001828103825260278152602001806117ab6027913960400191505060405180910390fd5b5090565b600080610d306305f5e100610d2a610d19662386f26fc100008760400151600160028110610d0e57fe5b602002015190610c1a565b86516001600160801b031690610ee9565b90610f92565b90506000610da7610da2610d6f662386f26fc10000610d2a610d64662386f26fc100008a60400151600060028110610d0e57fe5b8a51600f0b90610ee9565b610d9c68056bc75e2d63100000610d2a6002610d968c600160200201518a90600f0b610ee9565b90610ee9565b90610c1a565b61104a565b9050610de1610dda610da269d3c21bcecceda1000000610d2a8960016020020151600f0b610d966002816101f48b610ee9565b829061105d565b9050600064e8d4a51000610e1783610e1188600001516001600160801b03166101f46110b790919063ffffffff16565b906110b7565b81610e1e57fe5b87519190049150600f0b151580610e3b57506020860151600f0b15155b8015610e4b57506404a817c80081105b15610e5857506404a817c8005b610e6181611110565b9695505050505050565b60006103bb610e7e848460600151611154565b610d9c858561117b565b6000805b836020015151811015610ee257610ed8610b0285602001518381518110610eaf57fe5b6020026020010151600001518560028110610ec657fe5b6020020151600f85810b91900b610c1a565b9150600101610e8c565b5092915050565b600082610ef8575060006103be565b82600019148015610f0c5750600160ff1b82145b15610f485760405162461bcd60e51b81526004018080602001828103825260278152602001806118356027913960400191505060405180910390fd5b82820282848281610f5557fe5b05146103bb5760405162461bcd60e51b81526004018080602001828103825260278152602001806118356027913960400191505060405180910390fd5b600081610fe6576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b81600019148015610ffa5750600160ff1b83145b156110365760405162461bcd60e51b81526004018080602001828103825260218152602001806117f36021913960400191505060405180910390fd5b600082848161104157fe5b05949350505050565b600080821215610ce057816000036103be565b6000828201838110156103bb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826110c6575060006103be565b828202828482816110d357fe5b04146103bb5760405162461bcd60e51b81526004018080602001828103825260218152602001806118146021913960400191505060405180910390fd5b6000600160ff1b8210610ce05760405162461bcd60e51b815260040180806020018281038252602881526020018061185c6028913960400191505060405180910390fd5b60008060005b6002811015610bcb57611171610bba8683876111a2565b915060010161115a565b60008060005b6002811015610bcb57611198610bba868387611202565b9150600101611181565b6000806111ef856000015185600281106111b857fe5b6020020151600f0b610d968587600281106111cf57fe5b6020020151886040015188600281106111e457fe5b602002015190611269565b9050610b3581662386f26fc10000610f92565b6000806112598560000151856002811061121857fe5b6020020151600f0b610d966112498860200151886002811061123657fe5b60200201516001600160801b0316611110565b866020015188600281106111e457fe5b6305f5e100900595945050505050565b600081830381831280159061127e5750838113155b80611293575060008312801561129357508381135b6103bb5760405162461bcd60e51b81526004018080602001828103825260248152602001806118846024913960400191505060405180910390fd5b60405180606001604052806112e1611324565b81526020016112ee611324565b81526020016112fb611324565b905290565b50805460008255600402906000526020600020908101906113219190611342565b50565b60405180604001604052806002906020820280368337509192915050565b80821115610ce0576000611356828261137b565b61136460018301600061137b565b611372600283016000611382565b50600401611342565b5060009055565b506000815560010160009055565b600082601f8301126113a0578081fd5b6040516040810181811067ffffffffffffffff821117156113bd57fe5b80604052508083856040860111156113d3578384fd5b835b60028110156113f45781358352602092830192909101906001016113d5565b509195945050505050565b8035600f81900b81146104e857600080fd5b600060e08284031215611422578081fd5b6040516080810181811067ffffffffffffffff8211171561143f57fe5b60405290508082356001600160801b038116811461145c57600080fd5b815261146b8460208501611390565b602082015261147d8460608501611390565b604082015261148f8460a08501611390565b60608201525092915050565b60008061012083850312156114ae578182fd5b83601f8401126114bc578182fd5b6040516040810181811067ffffffffffffffff821117156114d957fe5b8060405250808460408601878111156114f0578586fd5b855b600281101561151957611504836113ff565b845260209384019392909201916001016114f2565b508395506115278882611411565b9450505050509250929050565b600060208284031215611545578081fd5b5051919050565b6000806040838503121561155e578182fd5b50508035926020909101359150565b6000806101008385031215611580578182fd5b823591506115918460208501611411565b90509250929050565b600080604083850312156115ac578182fd5b505080516020909101519092909150565b600060e082840312156115ce578081fd5b6103bb8383611411565b6000602082840312156115e9578081fd5b5035919050565b600080600080600060a08688031215611607578081fd5b853594506020860135935061161e604087016113ff565b925060608601359150611633608087016113ff565b90509295509295909350565b8060005b6002811015611662578151845260209384019390910190600101611643565b50505050565b901515815260200190565b600f9190910b815260200190565b90815260200190565b815160c08201908260005b60028110156116b7578251600f0b825260209283019290910190600101611695565b5050506020808401516040840160005b60028110156116ed5782516001600160801b0316825291830191908301906001016116c7565b505050506040830151610ee2608084018261163f565b9283526020830191909152604082015260600190565b838152602080820184905282516001600160801b0316604083015282015161012082019061174a606084018261163f565b50604083015161175d60a084018261163f565b50606083015161177060e084018261163f565b50949350505050565b95865260208601949094526040850192909252600f90810b606085015260808401919091520b60a082015260c0019056fe53616665436173743a2076616c756520646f65736e27742066697420696e2031323820626974735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212209542d3319ed0481cecb07c695ad9bebc9f791c145a6b5d8f1815b9ade385edc264736f6c63430007060033";

type TraderVaultLibTesterConstructorParams =
  | [
      linkLibraryAddresses: TraderVaultLibTesterLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TraderVaultLibTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TraderVaultLibTester__factory extends ContractFactory {
  constructor(...args: TraderVaultLibTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        TraderVaultLibTester__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: TraderVaultLibTesterLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$d529c113b49f05715913138dde996bfccf\\$__", "g"),
      linkLibraryAddresses["src/lib/TraderVaultLib.sol:TraderVaultLib"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TraderVaultLibTester> {
    return super.deploy(overrides || {}) as Promise<TraderVaultLibTester>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TraderVaultLibTester {
    return super.attach(address) as TraderVaultLibTester;
  }
  connect(signer: Signer): TraderVaultLibTester__factory {
    return super.connect(signer) as TraderVaultLibTester__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TraderVaultLibTesterInterface {
    return new utils.Interface(_abi) as TraderVaultLibTesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TraderVaultLibTester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TraderVaultLibTester;
  }
}

export interface TraderVaultLibTesterLibraryAddresses {
  ["src/lib/TraderVaultLib.sol:TraderVaultLib"]: string;
}
